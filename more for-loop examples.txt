# This loop iterates on the value of the "number" variable in a range
# of 1 to 6+1 (the upper range limit of 6 is excluded, so +1 has
# been added to it to include 6 in the range). The incremental value
# for the loop is 2 (number+2). The print() function will output the
# resulting value of "number" multiplied by 3.

for number in range(1, 6+1, 2):
    print(number * 3)

# The loop should print 3, 9, 15


# This code demonstrates the outer and inner loop iterations of a pair 
# of nested for loops. Click "Run" to see the results. The outer loop
# will run twice for the range pointer positions [0, 1] in range(2).
# The inner loop will run 4 times for the range pointer positions 
# [0, 1, 2, 3] in range(3+1) or range(4) each time the outer loop runs.
# So, the inner loop will execute 8 times in total.

for x in range(2):
    print("This is the outer loop iteration number " + str(x))
    for y in range(3+1):
        print("Inner loop iteration number " + str(y))
    print("Exit inner loop")


This is the outer loop iteration number 0
Inner loop iteration number 0
Inner loop iteration number 1
Inner loop iteration number 2
Inner loop iteration number 3
Exit inner loop
This is the outer loop iteration number 1
Inner loop iteration number 0
Inner loop iteration number 1
Inner loop iteration number 2
Inner loop iteration number 3
Exit inner loop


Example of a for Loop with Nested if Statement:

# This for loop iterates through the numbers 0 to 6. The if statement
# uses the modulo operator to test if the "x" variable is divisible by
# 2. If True, the if statement will print the value of "x" and exit
# back into the for loop for the next iteration of "x". Since no 
# incremental value is specified in the range() parameters, the default
# increment is +1. 

for x in range(7):
    if x % 2 == 0:
        print(x)

# The loop should print 0, 2, 4, 6

# As a list comprehension:
even_numbers = [x for x in range(7) if x % 2 == 0]
print(even_numbers)

0
2
4
6
[0, 2, 4, 6]

With a traditional for Loop, you might write:

sequence = range(10)
new_list = []
for x in sequence:
    if x % 2 == 0:
        new_list.append(x)


With a list comprehension, you could achieve the same result in a more concise way:

sequence = range(10)
new_list = [x for x in sequence if x % 2 == 0]


Both of these pieces of code will create a list of even numbers from 0 to 10: [0, 2, 4, 6, 8]. The list comprehension version does this in a single, compact line. These “one-liners” are very useful and dramatically reduce overhead. 

An example of a useful one-liner is:

print("*" * 8)

