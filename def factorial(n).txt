def factorial(n):
  if n < 2:
    return 1
  return n * factorial(n-1)


def factorial(n):
  print("Factorial called with " + str(n))
  if n < 2:
    print("Returning 1")
    return 1
  result = n * factorial(n-1)
  print("Returning " + str(result) + " for factorial of " + str(n))
  return result

factorial(4)

output:

Factorial called with 4 #note: It prints 4 times because you call factorial(..) recursively, until you break out in the base case n < 2

Factorial called with 3
Factorial called with 2
Factorial called with 1
Returning 1
Returning 2 for factorial of 2
Returning 6 for factorial of 3
Returning 24 for factorial of 4
24

def factorial(n):
  if n < 2:
    return 1
  return n * factorial(n-1)

factorial(1000)

#this will produce an error - as it has hit maximum recursion in comparison


A recursive function must include a recursive case and base case. The recursive case calls the function again, with a different value. 
The base case returns a value without calling the same function.

A recursive function will usually have this structure:

def recursive_function(parameters):
    if base_case_condition(parameters):
        return base_case_value
    recursive_function(modified_parameters)



def factorial(n):
    if n > 0:
        return n * factorial(n - 1)
    else:
        return 1

A simple base case (or cases) — a terminating scenario that does not use recursion to produce an answer
A recursive step — a set of rules that reduces all successive cases toward the base case.